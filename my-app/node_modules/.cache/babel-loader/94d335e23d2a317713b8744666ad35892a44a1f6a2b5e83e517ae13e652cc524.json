{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [serialid, setserialid] = useState();\n  const [redirectPath, setRedirectPath] = useState(null);\n  const navigate = useNavigate();\n  const logout = async () => {\n    try {\n      console.log(serialid);\n      // 서버로 로그아웃 요청을 보냄\n      const response = await fetch(`http://49.50.164.251:8000/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          serial_id: serialid\n        })\n      });\n      if (response.ok) {\n        console.log('Logged out successfully from the server');\n      } else {\n        console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\n      }\n    } catch (error) {\n      console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\n    }\n\n    // 서버 로그아웃 성공 후 클라이언트 상태 업데이트\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setUserName(''); // 로그아웃 시 사용자 이름 초기화\n    setIsLoggedIn(false);\n    setserialid(null);\n  };\n  useEffect(() => {\n    console.log('새로고침');\n    console.log(serialid + \"4\");\n    verifyToken(setIsLoggedIn, setUserName, setserialid, navigate, logout);\n  }, []);\n  const setLoginRedirectPath = path => {\n    setRedirectPath(path);\n  };\n  const login = (token, name, serial_id) => {\n    localStorage.setItem('token', token);\n    setIsLoggedIn(true);\n    setUserName(name);\n    setserialid(serial_id);\n    if (redirectPath) {\n      navigate(redirectPath);\n      setRedirectPath(null); // 경로 초기화\n    } else {\n      navigate('/');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userName,\n      serialid,\n      login,\n      logout,\n      setLoginRedirectPath,\n      verifyToken,\n      setUserName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"CUFJ2r3iWfG7zarF0SptaeDKXXM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","userName","setUserName","serialid","setserialid","redirectPath","setRedirectPath","navigate","logout","console","log","response","fetch","method","headers","body","JSON","stringify","serial_id","ok","error","localStorage","removeItem","verifyToken","setLoginRedirectPath","path","login","token","name","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst AuthContext = createContext(null);\r\n\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [userName, setUserName] = useState('');\r\n    const [serialid, setserialid] = useState();\r\n    const [redirectPath, setRedirectPath] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const logout = async () => {\r\n        try {\r\n            console.log(serialid);\r\n            // 서버로 로그아웃 요청을 보냄\r\n            const response = await fetch(`http://49.50.164.251:8000/logout`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ serial_id: serialid }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Logged out successfully from the server');\r\n            } else {\r\n                console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\r\n        }\r\n\r\n        // 서버 로그아웃 성공 후 클라이언트 상태 업데이트\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        setUserName(''); // 로그아웃 시 사용자 이름 초기화\r\n        setIsLoggedIn(false);\r\n        setserialid(null);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('새로고침');\r\n            console.log(serialid + \"4\");\r\n        verifyToken(setIsLoggedIn, setUserName, setserialid, navigate, logout);\r\n    }, []);\r\n    const setLoginRedirectPath = (path) => {\r\n        setRedirectPath(path);\r\n    };\r\n    const login = (token, name, serial_id) => {\r\n        localStorage.setItem('token', token);\r\n        setIsLoggedIn(true);\r\n        setUserName(name);\r\n        setserialid(serial_id);\r\n        if (redirectPath) {\r\n            navigate(redirectPath);\r\n            setRedirectPath(null); // 경로 초기화\r\n        }\r\n        else {\r\n            navigate('/');\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, userName, serialid, login, logout, setLoginRedirectPath, verifyToken, setUserName }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n                       "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}