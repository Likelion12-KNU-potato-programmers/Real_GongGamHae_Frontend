{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\pages\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n// 상단 게시판 카테고리 모음\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = ['자유게시판', '공감게시판', 'BEST게시판'];\nconst MainPage = () => {\n  _s();\n  // 처음 초기값 게시판을 자유게시판으로 만들기 위하 코드, 만약 '공감게시판'이면 새로고침할 때마다 공감게시판이 보임\n  const [selectedCategory, setSelectedCategory] = useState('자유게시판');\n  const [posts, setPosts] = useState(null);\n  useEffect(() => {\n    // API를 호출하여 자유게시판의 게시글 데이터를 가져옵니다.\n    const fetchPosts = async () => {\n      try {\n        // 예시 데이터 대신에 실제 API 호출을 수행해야 합니다.\n        const response = await fetch('API_ENDPOINT_HERE');\n        if (!response.ok) {\n          throw new Error('Failed to fetch posts');\n        }\n        const data = await response.json();\n        setPosts(data); // API에서 받은 데이터를 상태에 설정합니다.\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts(); // fetchPosts 함수를 호출하여 데이터를 가져옵니다.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBA54\\uC778 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedCategory(category),\n        style: {\n          margin: '0 10px'\n        },\n        children: category\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/PostWrite\",\n      children: \"\\uAE00\\uC4F0\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/LoginPage\",\n      children: \"\\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/MyPage\",\n      children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts === null ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 13\n  }, this);\n};\n_s(MainPage, \"WWkGARB2bMeES+IW460a8WfedE0=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","categories","MainPage","_s","selectedCategory","setSelectedCategory","posts","setPosts","fetchPosts","response","fetch","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","map","category","onClick","margin","to","post","title","content","id","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/pages/MainPage.js"],"sourcesContent":["    import React, { useState, useEffect } from 'react';\r\n    import { Link } from 'react-router-dom';\r\n\r\n    // 상단 게시판 카테고리 모음\r\n    const categories = ['자유게시판', '공감게시판', 'BEST게시판'];\r\n\r\n    const MainPage = () => {\r\n        // 처음 초기값 게시판을 자유게시판으로 만들기 위하 코드, 만약 '공감게시판'이면 새로고침할 때마다 공감게시판이 보임\r\n        const [selectedCategory, setSelectedCategory] = useState('자유게시판');\r\n        const [posts, setPosts] = useState(null);\r\n\r\n        \r\n        useEffect(() => {\r\n            // API를 호출하여 자유게시판의 게시글 데이터를 가져옵니다.\r\n            const fetchPosts = async () => {\r\n            try {\r\n                // 예시 데이터 대신에 실제 API 호출을 수행해야 합니다.\r\n                const response = await fetch('API_ENDPOINT_HERE');\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch posts');\r\n                }\r\n                const data = await response.json();\r\n                setPosts(data); // API에서 받은 데이터를 상태에 설정합니다.\r\n            } catch (error) {\r\n                console.error('Error fetching posts:', error);\r\n                }\r\n            };\r\n            fetchPosts(); // fetchPosts 함수를 호출하여 데이터를 가져옵니다.\r\n        }, []);\r\n\r\n        return (\r\n            <div>\r\n            \r\n                <h1>메인 페이지</h1>\r\n                <div style={{ marginBottom: '20px' }}>\r\n                    {categories.map(category => (\r\n                    <button \r\n                        key={category} \r\n                        onClick={() => setSelectedCategory(category)}\r\n                        style={{ margin: '0 10px' }}\r\n                    >\r\n                        {category}\r\n                    </button>\r\n                    ))}\r\n                </div>\r\n\r\n            <Link to=\"/PostWrite\">글쓰기</Link> {/* 글쓰기 버튼 또는 Link 말고 onClick 방식 둘 중 하나 사용 */}\r\n            <Link to=\"/LoginPage\">로그인</Link> {/* 로그인 버튼 추가 */}\r\n            <Link to=\"/MyPage\">마이페이지</Link> {/* 마이페이지 버튼 추가 */}\r\n\r\n\r\n            <ul>\r\n                {posts === null ? (\r\n                    <li>Loading...</li>\r\n                ) : (\r\n                    posts.map(post => (\r\n                        <li key={post.id}>\r\n                            <h2>{post.title}</h2>\r\n                            <p>{post.content}</p>\r\n                        </li>\r\n                    ))\r\n                )}\r\n            </ul>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    export default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}