{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState('');\n  const navigate = useNavigate();\n  const logout = async () => {\n    try {\n      console.log(userId);\n      // 서버로 로그아웃 요청을 보냄\n      const response = await fetch(`http://localhost:8000/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          serial_id: serialid\n        })\n      });\n      if (response.ok) {\n        console.log('Logged out successfully from the server');\n      } else {\n        console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\n      }\n    } catch (error) {\n      console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\n    }\n    setUserName(''); // 로그아웃 시 사용자 이름 초기화\n    setIsLoggedIn(false);\n  };\n  const login = id => {\n    setIsLoggedIn(true);\n    setUserName(name);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userName,\n      serialid,\n      login,\n      logout,\n      setUserName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"gJxWOeyC2E2z0ovnL+QE1arlH6I=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","userId","setUserId","navigate","logout","console","log","response","fetch","method","headers","body","JSON","stringify","serial_id","serialid","ok","error","setUserName","login","id","name","Provider","value","userName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst AuthContext = createContext(null);\r\n\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [userId, setUserId] = useState('');\r\n    \r\n    const navigate = useNavigate();\r\n\r\n    const logout = async () => {\r\n        try {\r\n            console.log(userId);\r\n            // 서버로 로그아웃 요청을 보냄\r\n            const response = await fetch(`http://localhost:8000/logout`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ serial_id: serialid }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Logged out successfully from the server');\r\n            } else {\r\n                console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\r\n        }\r\n\r\n        setUserName(''); // 로그아웃 시 사용자 이름 초기화\r\n        setIsLoggedIn(false);\r\n        \r\n    };\r\n\r\n\r\n    const login = (id) => {\r\n        setIsLoggedIn(true);\r\n        setUserName(name);\r\n        \r\n    };\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, userName, serialid, login, logout, setUserName }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n                       "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAGvC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMgB,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9B,MAAMc,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACAC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;MACnB;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,SAAS,EAAEC;QAAS,CAAC;MAChD,CAAC,CAAC;MAEF,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACbX,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAC1D,CAAC,MAAM;QACHD,OAAO,CAACY,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChE;IAEAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACjBlB,aAAa,CAAC,KAAK,CAAC;EAExB,CAAC;EAGD,MAAMmB,KAAK,GAAIC,EAAE,IAAK;IAClBpB,aAAa,CAAC,IAAI,CAAC;IACnBkB,WAAW,CAACG,IAAI,CAAC;EAErB,CAAC;EAGD,oBACI7B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAExB,UAAU;MAAEyB,QAAQ;MAAET,QAAQ;MAAEI,KAAK;MAAEf,MAAM;MAAEc;IAAY,CAAE;IAAArB,QAAA,EACvFA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC9B,GAAA,CA7CWF,YAAY;EAAA,QAIJN,WAAW;AAAA;AAAAuC,EAAA,GAJnBjC,YAAY;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}