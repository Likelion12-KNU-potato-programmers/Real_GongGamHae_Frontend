{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\pages\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n// 상단 게시판 카테고리 모음\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = ['자유게시판', '공감게시판', 'BEST게시판'];\nconst MainPage = () => {\n  _s();\n  // 처음 초기값 게시판을 자유게시판으로 만들기 위하 코드, 만약 '공감게시판'이면 새로고침할 때마다 공감게시판이 보임\n  const [selectedCategory, setSelectedCategory] = useState('자유게시판');\n  const [posts, setPosts] = useState(null);\n\n  // 각 게시판에 대한 예시 데이터\n  // 예시 데이터를 사용하여 게시물 목록을 설정합니다.\n  // 실제 애플리케이션에서는 API 호출을 통해 데이터를 가져와야 합니다.    \n  const examplePosts = {\n    '자유게시판': [{\n      id: 1,\n      category: '자유게시판',\n      title: '첫 번째 자유게시판 게시물',\n      content: '첫 번째 게시물 내용입니다.'\n    }, {\n      id: 2,\n      category: '자유게시판',\n      title: '두 번째 자유게시판 게시물',\n      content: '두 번째 게시물 내용입니다.'\n    }, {\n      id: 3,\n      category: '자유게시판',\n      title: '세 번째 자유게시판 게시물',\n      content: '세 번째 게시물 내용입니다.'\n    }],\n    '공감게시판': [{\n      id: 4,\n      category: '공감게시판',\n      title: '첫 번째 공감게시판 게시물',\n      content: '첫 번째 게시물 내용입니다.'\n    }, {\n      id: 5,\n      category: '공감게시판',\n      title: '두 번째 공감게시판 게시물',\n      content: '두 번째 게시물 내용입니다.'\n    }, {\n      id: 6,\n      category: '공감게시판',\n      title: '세 번째 공감게시판 게시물',\n      content: '세 번째 게시물 내용입니다.'\n    }, {\n      id: 7,\n      category: '공감게시판',\n      title: '네 번째 공감게시판 게시물',\n      content: '네 번째 게시물 내용입니다.'\n    }, {\n      id: 8,\n      category: '공감게시판',\n      title: '다섯 번째 공감게시판 게시물',\n      content: '다섯 번째 게시물 내용입니다.'\n    }],\n    'BEST게시판': [{\n      id: 9,\n      category: 'BEST게시판',\n      title: '첫 번째 BEST게시판 게시물',\n      content: '첫 번째 게시물 내용입니다.'\n    }, {\n      id: 10,\n      category: 'BEST게시판',\n      title: '두 번째 BEST게시판 게시물',\n      content: '두 번째 게시물 내용입니다.'\n    }, {\n      id: 11,\n      category: 'BEST게시판',\n      title: '세 번째 BEST게시판 게시물',\n      content: '세 번째 게시물 내용입니다.'\n    }, {\n      id: 12,\n      category: 'BEST게시판',\n      title: '네 번째 BEST게시판 게시물',\n      content: '네 번째 게시물 내용입니다.'\n    }, {\n      id: 13,\n      category: 'BEST게시판',\n      title: '다섯 번째 BEST게시판 게시물',\n      content: '다섯 번째 게시물 내용입니다.'\n    }, {\n      id: 14,\n      category: 'BEST게시판',\n      title: '여섯 번째 BEST게시판 게시물',\n      content: '여섯 번째 게시물 내용입니다.'\n    }, {\n      id: 15,\n      category: 'BEST게시판',\n      title: '일곱 번째 BEST게시판 게시물',\n      content: '일곱 번째 게시물 내용입니다.'\n    }, {\n      id: 16,\n      category: 'BEST게시판',\n      title: '여덟 번째 BEST게시판 게시물',\n      content: '여덟 번째 게시물 내용입니다.'\n    }]\n  };\n  useEffect(() => {\n    // 선택된 카테고리에 해당하는 게시글 데이터를 설정합니다.\n    const selectedPosts = examplePosts[selectedCategory];\n    if (selectedPosts) {\n      setPosts(selectedPosts);\n    }\n  }, [selectedCategory, examplePosts]);\n  const addPost = newPost => {\n    const updatedPosts = [...posts, newPost]; // Create a new array with the new post added\n    setPosts(updatedPosts); // Update the posts state with the new array\n  };\n\n  /* 실제 호출에 쓸 코드\r\n  useEffect(() => {\r\n  // API를 호출하여 자유게시판의 게시글 데이터를 가져옵니다.\r\n  const fetchPosts = async () => {\r\n    try {\r\n      // 예시 데이터 대신에 실제 API 호출을 수행해야 합니다.\r\n      const response = await fetch('API_ENDPOINT_HERE');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n      const data = await response.json();\r\n      setPosts(data); // API에서 받은 데이터를 상태에 설정합니다.\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error);\r\n    }\r\n  };\r\n    fetchPosts(); // fetchPosts 함수를 호출하여 데이터를 가져옵니다.\r\n  }, []);\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBA54\\uC778 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedCategory(category),\n        style: {\n          margin: '0 10px'\n        },\n        children: category\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/write\",\n      children: \"\\uAE00\\uC4F0\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts === null ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"WWkGARB2bMeES+IW460a8WfedE0=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","categories","MainPage","_s","selectedCategory","setSelectedCategory","posts","setPosts","examplePosts","id","category","title","content","selectedPosts","addPost","newPost","updatedPosts","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","map","onClick","margin","to","post","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/pages/MainPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// 상단 게시판 카테고리 모음\r\nconst categories = ['자유게시판', '공감게시판', 'BEST게시판'];\r\n\r\nconst MainPage = () => {\r\n    // 처음 초기값 게시판을 자유게시판으로 만들기 위하 코드, 만약 '공감게시판'이면 새로고침할 때마다 공감게시판이 보임\r\n    const [selectedCategory, setSelectedCategory] = useState('자유게시판');\r\n    const [posts, setPosts] = useState(null);\r\n\r\n\r\n\r\n    // 각 게시판에 대한 예시 데이터\r\n    // 예시 데이터를 사용하여 게시물 목록을 설정합니다.\r\n    // 실제 애플리케이션에서는 API 호출을 통해 데이터를 가져와야 합니다.    \r\n    const examplePosts = {\r\n        '자유게시판': [\r\n          { id: 1, category: '자유게시판', title: '첫 번째 자유게시판 게시물', content: '첫 번째 게시물 내용입니다.' },\r\n          { id: 2, category: '자유게시판', title: '두 번째 자유게시판 게시물', content: '두 번째 게시물 내용입니다.' },\r\n          { id: 3, category: '자유게시판', title: '세 번째 자유게시판 게시물', content: '세 번째 게시물 내용입니다.' }\r\n        ],\r\n        '공감게시판': [\r\n          { id: 4, category: '공감게시판', title: '첫 번째 공감게시판 게시물', content: '첫 번째 게시물 내용입니다.' },\r\n          { id: 5, category: '공감게시판', title: '두 번째 공감게시판 게시물', content: '두 번째 게시물 내용입니다.' },\r\n          { id: 6, category: '공감게시판', title: '세 번째 공감게시판 게시물', content: '세 번째 게시물 내용입니다.' },\r\n          { id: 7, category: '공감게시판', title: '네 번째 공감게시판 게시물', content: '네 번째 게시물 내용입니다.' },\r\n          { id: 8, category: '공감게시판', title: '다섯 번째 공감게시판 게시물', content: '다섯 번째 게시물 내용입니다.' }\r\n        ],\r\n        'BEST게시판': [\r\n          { id: 9, category: 'BEST게시판', title: '첫 번째 BEST게시판 게시물', content: '첫 번째 게시물 내용입니다.' },\r\n          { id: 10, category: 'BEST게시판', title: '두 번째 BEST게시판 게시물', content: '두 번째 게시물 내용입니다.' },\r\n          { id: 11, category: 'BEST게시판', title: '세 번째 BEST게시판 게시물', content: '세 번째 게시물 내용입니다.' },\r\n          { id: 12, category: 'BEST게시판', title: '네 번째 BEST게시판 게시물', content: '네 번째 게시물 내용입니다.' },\r\n          { id: 13, category: 'BEST게시판', title: '다섯 번째 BEST게시판 게시물', content: '다섯 번째 게시물 내용입니다.' },\r\n          { id: 14, category: 'BEST게시판', title: '여섯 번째 BEST게시판 게시물', content: '여섯 번째 게시물 내용입니다.' },\r\n          { id: 15, category: 'BEST게시판', title: '일곱 번째 BEST게시판 게시물', content: '일곱 번째 게시물 내용입니다.' },\r\n          { id: 16, category: 'BEST게시판', title: '여덟 번째 BEST게시판 게시물', content: '여덟 번째 게시물 내용입니다.' }\r\n        ]\r\n    };\r\n    \r\n    useEffect(() => {\r\n    // 선택된 카테고리에 해당하는 게시글 데이터를 설정합니다.\r\n    const selectedPosts = examplePosts[selectedCategory];\r\n        if (selectedPosts) {\r\n            setPosts(selectedPosts);\r\n        }\r\n    }, [selectedCategory, examplePosts]);\r\n\r\n    const addPost = (newPost) => {\r\n        const updatedPosts = [...posts, newPost]; // Create a new array with the new post added\r\n        setPosts(updatedPosts); // Update the posts state with the new array\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    /* 실제 호출에 쓸 코드\r\n    useEffect(() => {\r\n    // API를 호출하여 자유게시판의 게시글 데이터를 가져옵니다.\r\n    const fetchPosts = async () => {\r\n      try {\r\n        // 예시 데이터 대신에 실제 API 호출을 수행해야 합니다.\r\n        const response = await fetch('API_ENDPOINT_HERE');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch posts');\r\n        }\r\n        const data = await response.json();\r\n        setPosts(data); // API에서 받은 데이터를 상태에 설정합니다.\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    };\r\n\r\n    fetchPosts(); // fetchPosts 함수를 호출하여 데이터를 가져옵니다.\r\n    }, []);\r\n    */\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h1>메인 페이지</h1>\r\n        <div style={{ marginBottom: '20px' }}>\r\n            {categories.map(category => (\r\n            <button \r\n                key={category} \r\n                onClick={() => setSelectedCategory(category)}\r\n                style={{ margin: '0 10px' }}\r\n            >\r\n                {category}\r\n            </button>\r\n            ))}\r\n        </div>\r\n\r\n        <Link to=\"/write\">글쓰기</Link> {/* 글쓰기 버튼 또는 Link 말고 onClick 방식 둘 중 하나 사용 */}\r\n        \r\n        <ul>\r\n            {posts === null ? (\r\n                <li>Loading...</li>\r\n            ) : (\r\n                posts.map(post => (\r\n                    <li key={post.id}>\r\n                        <h2>{post.title}</h2>\r\n                        <p>{post.content}</p>\r\n                    </li>\r\n                ))\r\n            )}\r\n        </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}