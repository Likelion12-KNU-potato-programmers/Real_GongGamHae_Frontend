{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\pages\\\\PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { useAuth } from '../components/Auth/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const {\n    category,\n    id\n  } = useParams();\n  const {\n    userCategory\n  } = useAuth(); // useAuth로부터 category 받아오기\n\n  const [post, setPost] = useState(null);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPostAndComments = async () => {\n      try {\n        setLoading(true);\n        console.log(userCategory);\n\n        // 게시물 가져오기\n        let postEndpoint = '';\n        // 새 댓글 CURD\n        let commentEndPoint = '';\n        if (userCategory === '자유게시판') {\n          postEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n          commentEndPoint = `http://localhost:8080/api/jayucomments/${id}`;\n        } else if (userCategory === '공감게시판') {\n          postEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n          commentEndPoint = `http://localhost:8080/api/gonggamcomments/${id}`;\n        } else if (userCategory === 'bestposts') {\n          postEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n          commentEndPoint = `http://localhost:8080/api/bestcomments/${id}`;\n        } else {\n          throw new Error(`Invalid category: ${category}`);\n        }\n        const postResponse = await fetch(postEndpoint);\n        if (!postResponse.ok) {\n          throw new Error('Failed to fetch post');\n        }\n        const postData = await postResponse.json();\n        setPost(postData);\n\n        // // 댓글 가져오기\n        // const commentResponse = await fetch(commentEndPoint);\n        // if (!commentResponse.ok) {\n        //   throw new Error('Failed to fetch comments');\n        // }\n        // const commentsData = await commentResponse.json();\n        // setComments(commentsData);\n      } catch (error) {\n        console.error('Error fetching post and comments:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPostAndComments();\n  }, [category, id]);\n  const handleAddComment = async () => {\n    // 댓글 추가 로직\n  };\n  const handleUpdatePost = async () => {\n    // 포스트 수정 로직\n    try {\n      // 수정할 내용을 담은 객체 생성\n      const updatedPost = {\n        title: '새로운 제목',\n        // 수정된 제목\n        content: '새로운 내용' // 수정된 내용\n      };\n\n      // 수정 요청을 보낼 엔드포인트 설정\n      let updateEndpoint = '';\n      if (userCategory === '자유게시판') {\n        updateEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n      } else if (userCategory === '공감게시판') {\n        updateEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n      } else if (userCategory === 'bestposts') {\n        updateEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n      } else {\n        throw new Error(`Invalid category: ${category}`);\n      }\n\n      // 수정 요청 보내기\n      const response = await fetch(updateEndpoint, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedPost)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update post');\n      }\n\n      // 수정이 성공적으로 완료되면 해당 포스트를 다시 가져옴\n      const updatedPostData = await response.json();\n      setPost(updatedPostData);\n    } catch (error) {\n      console.error('Error updating post:', error);\n    }\n  };\n  const handleDeletePost = async () => {\n    // 포스트 삭제 로직\n    try {\n      let deleteEndpoint = '';\n      if (userCategory === '자유게시판') {\n        deleteEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n      } else if (userCategory === '공감게시판') {\n        deleteEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n      } else if (userCategory === 'bestposts') {\n        deleteEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n      } else {\n        throw new Error(`Invalid category: ${category}`);\n      }\n      const response = await fetch(deleteEndpoint, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete post');\n      }\n\n      // 포스트가 성공적으로 삭제되면 이전 페이지로 이동하거나 특정한 액션을 수행할 수 있음\n    } catch (error) {\n      console.error('Error deleting post:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 12\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uAC8C\\uC2DC\\uBB3C\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB313\\uAE00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: comment,\n        onChange: e => setComment(e.target.value),\n        placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"\\uB313\\uAE00 \\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdatePost,\n        children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC218\\uC815\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeletePost,\n        children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: post.comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [c.content, \"       \", c.user.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)\n        }, c.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"SDFCkw+poKsnH88Gu9jCRCp0UOg=\", false, function () {\n  return [useParams, useAuth];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useAuth","jsxDEV","_jsxDEV","PostPage","_s","category","id","userCategory","post","setPost","comment","setComment","comments","setComments","loading","setLoading","error","setError","fetchPostAndComments","console","log","postEndpoint","commentEndPoint","Error","postResponse","fetch","ok","postData","json","message","handleAddComment","handleUpdatePost","updatedPost","title","content","updateEndpoint","response","method","headers","body","JSON","stringify","updatedPostData","handleDeletePost","deleteEndpoint","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","c","user","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/pages/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../components/Auth/AuthContext';\r\n\r\nconst PostPage = () => {\r\n  const { category, id } = useParams();\r\n  const { userCategory } = useAuth(); // useAuth로부터 category 받아오기\r\n\r\n  const [post, setPost] = useState(null);\r\n  const [comment, setComment] = useState('');\r\n  const [comments, setComments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchPostAndComments = async () => {\r\n      try {\r\n        setLoading(true);\r\n        console.log(userCategory)\r\n\r\n        // 게시물 가져오기\r\n        let postEndpoint = '';\r\n        // 새 댓글 CURD\r\n        let commentEndPoint = '';\r\n        if (userCategory === '자유게시판') {\r\n          postEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\r\n          commentEndPoint = `http://localhost:8080/api/jayucomments/${id}`\r\n\r\n        } else if (userCategory === '공감게시판') {\r\n          postEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\r\n          commentEndPoint = `http://localhost:8080/api/gonggamcomments/${id}`\r\n\r\n        } else if (userCategory === 'bestposts') {\r\n          postEndpoint = `http://localhost:8080/api/bestposts/${id}`;\r\n          commentEndPoint = `http://localhost:8080/api/bestcomments/${id}`\r\n\r\n        } else {\r\n          throw new Error(`Invalid category: ${category}`);\r\n        }\r\n\r\n        const postResponse = await fetch(postEndpoint);\r\n        if (!postResponse.ok) {\r\n          throw new Error('Failed to fetch post');\r\n        }\r\n        const postData = await postResponse.json();\r\n        setPost(postData);\r\n\r\n\r\n        // // 댓글 가져오기\r\n        // const commentResponse = await fetch(commentEndPoint);\r\n        // if (!commentResponse.ok) {\r\n        //   throw new Error('Failed to fetch comments');\r\n        // }\r\n        // const commentsData = await commentResponse.json();\r\n        // setComments(commentsData);\r\n\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching post and comments:', error);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPostAndComments();\r\n  }, [category, id]);\r\n\r\n  const handleAddComment = async () => {\r\n    // 댓글 추가 로직\r\n  };\r\n\r\n  const handleUpdatePost = async () => {\r\n    // 포스트 수정 로직\r\n    try {\r\n      // 수정할 내용을 담은 객체 생성\r\n      const updatedPost = {\r\n        title: '새로운 제목', // 수정된 제목\r\n        content: '새로운 내용', // 수정된 내용\r\n      };\r\n\r\n      // 수정 요청을 보낼 엔드포인트 설정\r\n      let updateEndpoint = '';\r\n      if (userCategory === '자유게시판') {\r\n        updateEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\r\n      } else if (userCategory === '공감게시판') {\r\n        updateEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\r\n      } else if (userCategory === 'bestposts') {\r\n        updateEndpoint = `http://localhost:8080/api/bestposts/${id}`;\r\n      } else {\r\n        throw new Error(`Invalid category: ${category}`);\r\n      }\r\n\r\n      // 수정 요청 보내기\r\n      const response = await fetch(updateEndpoint, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedPost),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update post');\r\n      }\r\n\r\n      // 수정이 성공적으로 완료되면 해당 포스트를 다시 가져옴\r\n      const updatedPostData = await response.json();\r\n      setPost(updatedPostData);\r\n    } catch (error) {\r\n      console.error('Error updating post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePost = async () => {\r\n    // 포스트 삭제 로직\r\n    try {\r\n      let deleteEndpoint = '';\r\n      if (userCategory === '자유게시판') {\r\n        deleteEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\r\n      } else if (userCategory === '공감게시판') {\r\n        deleteEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\r\n      } else if (userCategory === 'bestposts') {\r\n        deleteEndpoint = `http://localhost:8080/api/bestposts/${id}`;\r\n      } else {\r\n        throw new Error(`Invalid category: ${category}`);\r\n      }\r\n\r\n      const response = await fetch(deleteEndpoint, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete post');\r\n      }\r\n\r\n      // 포스트가 성공적으로 삭제되면 이전 페이지로 이동하거나 특정한 액션을 수행할 수 있음\r\n    } catch (error) {\r\n      console.error('Error deleting post:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  if (!post) {\r\n    return <div>게시물을 찾을 수 없습니다.</div>;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>{post.title}</h1>\r\n      <p>{post.content}</p>\r\n\r\n      <div>\r\n        <h2>댓글</h2>\r\n        <textarea\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n          placeholder=\"댓글을 입력하세요\"\r\n        ></textarea>\r\n        <button onClick={handleAddComment}>댓글 추가</button>\r\n        <button onClick={handleUpdatePost}>포스트 수정</button>\r\n        <button onClick={handleDeletePost}>포스트 삭제</button>\r\n        <div>\r\n          {post.comments.map((c) => (\r\n            <div key={c.id}>\r\n              <p>{c.content}       {c.user.id}</p>\r\n              \r\n              {/* <p></p> */}\r\n\r\n\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,OAAO,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC,QAAQ;IAAEC;EAAG,CAAC,GAAGR,SAAS,CAAC,CAAC;EACpC,MAAM;IAAES;EAAa,CAAC,GAAGP,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEpC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMqB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBI,OAAO,CAACC,GAAG,CAACb,YAAY,CAAC;;QAEzB;QACA,IAAIc,YAAY,GAAG,EAAE;QACrB;QACA,IAAIC,eAAe,GAAG,EAAE;QACxB,IAAIf,YAAY,KAAK,OAAO,EAAE;UAC5Bc,YAAY,GAAI,uCAAsCf,EAAG,EAAC;UAC1DgB,eAAe,GAAI,0CAAyChB,EAAG,EAAC;QAElE,CAAC,MAAM,IAAIC,YAAY,KAAK,OAAO,EAAE;UACnCc,YAAY,GAAI,0CAAyCf,EAAG,EAAC;UAC7DgB,eAAe,GAAI,6CAA4ChB,EAAG,EAAC;QAErE,CAAC,MAAM,IAAIC,YAAY,KAAK,WAAW,EAAE;UACvCc,YAAY,GAAI,uCAAsCf,EAAG,EAAC;UAC1DgB,eAAe,GAAI,0CAAyChB,EAAG,EAAC;QAElE,CAAC,MAAM;UACL,MAAM,IAAIiB,KAAK,CAAE,qBAAoBlB,QAAS,EAAC,CAAC;QAClD;QAEA,MAAMmB,YAAY,GAAG,MAAMC,KAAK,CAACJ,YAAY,CAAC;QAC9C,IAAI,CAACG,YAAY,CAACE,EAAE,EAAE;UACpB,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC;QACzC;QACA,MAAMI,QAAQ,GAAG,MAAMH,YAAY,CAACI,IAAI,CAAC,CAAC;QAC1CnB,OAAO,CAACkB,QAAQ,CAAC;;QAGjB;QACA;QACA;QACA;QACA;QACA;QACA;MAIF,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDC,QAAQ,CAACD,KAAK,CAACa,OAAO,CAAC;MACzB,CAAC,SAAS;QACRd,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACb,QAAQ,EAAEC,EAAE,CAAC,CAAC;EAElB,MAAMwB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC;EAAA,CACD;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC;IACA,IAAI;MACF;MACA,MAAMC,WAAW,GAAG;QAClBC,KAAK,EAAE,QAAQ;QAAE;QACjBC,OAAO,EAAE,QAAQ,CAAE;MACrB,CAAC;;MAED;MACA,IAAIC,cAAc,GAAG,EAAE;MACvB,IAAI5B,YAAY,KAAK,OAAO,EAAE;QAC5B4B,cAAc,GAAI,uCAAsC7B,EAAG,EAAC;MAC9D,CAAC,MAAM,IAAIC,YAAY,KAAK,OAAO,EAAE;QACnC4B,cAAc,GAAI,0CAAyC7B,EAAG,EAAC;MACjE,CAAC,MAAM,IAAIC,YAAY,KAAK,WAAW,EAAE;QACvC4B,cAAc,GAAI,uCAAsC7B,EAAG,EAAC;MAC9D,CAAC,MAAM;QACL,MAAM,IAAIiB,KAAK,CAAE,qBAAoBlB,QAAS,EAAC,CAAC;MAClD;;MAEA;MACA,MAAM+B,QAAQ,GAAG,MAAMX,KAAK,CAACU,cAAc,EAAE;QAC3CE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACV,EAAE,EAAE;QAChB,MAAM,IAAIH,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA,MAAMmB,eAAe,GAAG,MAAMN,QAAQ,CAACR,IAAI,CAAC,CAAC;MAC7CnB,OAAO,CAACiC,eAAe,CAAC;IAC1B,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAM2B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC;IACA,IAAI;MACF,IAAIC,cAAc,GAAG,EAAE;MACvB,IAAIrC,YAAY,KAAK,OAAO,EAAE;QAC5BqC,cAAc,GAAI,uCAAsCtC,EAAG,EAAC;MAC9D,CAAC,MAAM,IAAIC,YAAY,KAAK,OAAO,EAAE;QACnCqC,cAAc,GAAI,0CAAyCtC,EAAG,EAAC;MACjE,CAAC,MAAM,IAAIC,YAAY,KAAK,WAAW,EAAE;QACvCqC,cAAc,GAAI,uCAAsCtC,EAAG,EAAC;MAC9D,CAAC,MAAM;QACL,MAAM,IAAIiB,KAAK,CAAE,qBAAoBlB,QAAS,EAAC,CAAC;MAClD;MAEA,MAAM+B,QAAQ,GAAG,MAAMX,KAAK,CAACmB,cAAc,EAAE;QAC3CP,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAACD,QAAQ,CAACV,EAAE,EAAE;QAChB,MAAM,IAAIH,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,IAAIF,OAAO,EAAE;IACX,oBAAOZ,OAAA;MAAA2C,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAIjC,KAAK,EAAE;IACT,oBAAOd,OAAA;MAAA2C,QAAA,GAAK,SAAO,EAAC7B,KAAK;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC;EAEA,IAAI,CAACzC,IAAI,EAAE;IACT,oBAAON,OAAA;MAAA2C,QAAA,EAAK;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACnC;EAGA,oBACE/C,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAA2C,QAAA,EAAKrC,IAAI,CAACyB;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrB/C,OAAA;MAAA2C,QAAA,EAAIrC,IAAI,CAAC0B;IAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAErB/C,OAAA;MAAA2C,QAAA,gBACE3C,OAAA;QAAA2C,QAAA,EAAI;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACX/C,OAAA;QACEgD,KAAK,EAAExC,OAAQ;QACfyC,QAAQ,EAAGC,CAAC,IAAKzC,UAAU,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAC;MAAW;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACZ/C,OAAA;QAAQqD,OAAO,EAAEzB,gBAAiB;QAAAe,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjD/C,OAAA;QAAQqD,OAAO,EAAExB,gBAAiB;QAAAc,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClD/C,OAAA;QAAQqD,OAAO,EAAEZ,gBAAiB;QAAAE,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClD/C,OAAA;QAAA2C,QAAA,EACGrC,IAAI,CAACI,QAAQ,CAAC4C,GAAG,CAAEC,CAAC,iBACnBvD,OAAA;UAAA2C,QAAA,eACE3C,OAAA;YAAA2C,QAAA,GAAIY,CAAC,CAACvB,OAAO,EAAC,SAAO,EAACuB,CAAC,CAACC,IAAI,CAACpD,EAAE;UAAA;YAAAwC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC,GAD5BQ,CAAC,CAACnD,EAAE;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMT,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7C,EAAA,CArLID,QAAQ;EAAA,QACaL,SAAS,EACTE,OAAO;AAAA;AAAA2D,EAAA,GAF5BxD,QAAQ;AAuLd,eAAeA,QAAQ;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}