{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// AuthContext 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// useAuth 훅 정의\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// AuthProvider 컴포넌트 정의\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLogin, setIsLogin] = useState(false);\n  const [userId, setUserId] = useState('');\n  const navigate = useNavigate();\n\n  // 로그아웃 함수\n  const logout = async () => {\n    try {\n      // 확인용\n      console.log(userId);\n\n      // 서버로 로그아웃 요청을 보냄\n      const response = await fetch(`http://localhost:8000/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userId\n        })\n      });\n      if (response.ok) {\n        console.log('Logged out successfully from the server');\n      } else {\n        console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\n      }\n    } catch (error) {\n      console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\n    }\n    setUserId(''); // 로그아웃 시 사용자 ID 초기화\n    setIsLogin(false);\n  };\n\n  // 로그인 함수\n  const login = userId => {\n    setIsLogin(true);\n    setUserId(userId);\n  };\n\n  // AuthContext.Provider로 상태와 함수를 전달\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLogin,\n      userId,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n// AuthProvider를 기본 내보내기로 export\n_s2(AuthProvider, \"9IZUuztJCZ1/niIsB9T0RcpyPLU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLogin","setIsLogin","userId","setUserId","navigate","logout","console","log","response","fetch","method","headers","body","JSON","stringify","ok","error","login","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// AuthContext 생성\r\nconst AuthContext = createContext(null);\r\n\r\n// useAuth 훅 정의\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// AuthProvider 컴포넌트 정의\r\nconst AuthProvider = ({ children }) => {\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [userId, setUserId] = useState('');\r\n    \r\n    const navigate = useNavigate();\r\n\r\n    // 로그아웃 함수\r\n    const logout = async () => {\r\n        try {\r\n            // 확인용\r\n            console.log(userId);\r\n\r\n            // 서버로 로그아웃 요청을 보냄\r\n            const response = await fetch(`http://localhost:8000/logout`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId: userId }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Logged out successfully from the server');\r\n            } else {\r\n                console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\r\n        }\r\n\r\n        setUserId(''); // 로그아웃 시 사용자 ID 초기화\r\n        setIsLogin(false);\r\n    };\r\n\r\n    // 로그인 함수\r\n    const login = (userId) => {\r\n        setIsLogin(true);\r\n        setUserId(userId);\r\n    };\r\n\r\n    // AuthContext.Provider로 상태와 함수를 전달\r\n    return (\r\n        <AuthContext.Provider value={{ isLogin, userId, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// AuthProvider를 기본 내보내기로 export\r\nexport default AuthProvider;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMe,QAAQ,GAAGb,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMc,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACA;MACAC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;MAEnB;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEZ,MAAM,EAAEA;QAAO,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAIM,QAAQ,CAACO,EAAE,EAAE;QACbT,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAC1D,CAAC,MAAM;QACHD,OAAO,CAACU,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZV,OAAO,CAACU,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChE;IAEAb,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IACfF,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMgB,KAAK,GAAIf,MAAM,IAAK;IACtBD,UAAU,CAAC,IAAI,CAAC;IAChBE,SAAS,CAACD,MAAM,CAAC;EACrB,CAAC;;EAED;EACA,oBACIT,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,OAAO;MAAEE,MAAM;MAAEe,KAAK;MAAEZ;IAAO,CAAE;IAAAP,QAAA,EAC3DA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAAxB,GAAA,CAhDMF,YAAY;EAAA,QAIGN,WAAW;AAAA;AAAAiC,EAAA,GAJ1B3B,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}