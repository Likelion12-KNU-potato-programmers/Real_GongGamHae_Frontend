{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\uBA4B\\uC0AC \\uD504\\uB85C\\uC81D\\uD2B8\\\\my-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//// useAuth와 AuthContext는 AuthProvider 외부에 정의되어야 한다.\n// AuthContext 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n// useAuth 훅 정의\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// AuthProvider 컴포넌트 정의\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLogin, setIsLogin] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [nickname, setNickname] = useState('');\n  const navigate = useNavigate();\n  const login = (userId, nickname) => {\n    setIsLogin(true);\n    setUserId(userId);\n    setNickname(nickname);\n    navigate('/');\n  };\n  const logout = async () => {\n    try {\n      console.log(serialid);\n      // 서버로 로그아웃 요청을 보냄\n      const response = await fetch(`http://49.50.164.251:8000/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          serial_id: serialid\n        })\n      });\n      if (response.ok) {\n        console.log('Logged out successfully from the server');\n      } else {\n        console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\n      }\n    } catch (error) {\n      console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\n    }\n\n    // 서버 로그아웃 성공 후 클라이언트 상태 업데이트\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setUserName(''); // 로그아웃 시 사용자 이름 초기화\n    setIsLoggedIn(false);\n    setserialid(null);\n  };\n\n  // AuthContext.Provider로 상태와 함수를 전달\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLogin,\n      userId,\n      nickname,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n// AuthProvider를 기본 내보내기로 export\n_s2(AuthProvider, \"8vqZxjZq6eFq/JrkRgFJBSlkWC0=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLogin","setIsLogin","userId","setUserId","nickname","setNickname","navigate","login","logout","console","log","serialid","response","fetch","method","headers","body","JSON","stringify","serial_id","ok","error","localStorage","removeItem","setUserName","setIsLoggedIn","setserialid","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/멋사 프로젝트/my-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n//// useAuth와 AuthContext는 AuthProvider 외부에 정의되어야 한다.\r\n// AuthContext 생성\r\nconst AuthContext = createContext(null);\r\n// useAuth 훅 정의\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n\r\n\r\n// AuthProvider 컴포넌트 정의\r\nconst AuthProvider = ({ children }) => {\r\n    \r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [userId, setUserId] = useState('');\r\n    const [nickname, setNickname] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const login = (userId, nickname) => {\r\n        setIsLogin(true);\r\n        setUserId(userId);\r\n        setNickname(nickname);\r\n        navigate('/');\r\n    };\r\n\r\n\r\n\r\n    const logout = async () => {\r\n        try {\r\n            console.log(serialid);\r\n            // 서버로 로그아웃 요청을 보냄\r\n            const response = await fetch(`http://49.50.164.251:8000/logout`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ serial_id: serialid }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Logged out successfully from the server');\r\n            } else {\r\n                console.error('Failed to logout from the server'); // 서버 로그아웃 실패 시 여기서 함수 종료\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out from the server:', error); // 에러 발생 시 여기서 함수 종료\r\n        }\r\n\r\n        // 서버 로그아웃 성공 후 클라이언트 상태 업데이트\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        setUserName(''); // 로그아웃 시 사용자 이름 초기화\r\n        setIsLoggedIn(false);\r\n        setserialid(null);\r\n\r\n    };\r\n    \r\n\r\n\r\n    // AuthContext.Provider로 상태와 함수를 전달\r\n    return (\r\n        <AuthContext.Provider value={{ isLogin, userId, nickname, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// AuthProvider를 기본 내보내기로 export\r\nexport default AuthProvider;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,WAAW,QAAQ,kBAAkB;;AAG9C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AACvC;AACA,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;;AAIpD;AAAAE,EAAA,CAJaD,OAAO;AAKpB,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAEnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMiB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAG9B,MAAMgB,KAAK,GAAGA,CAACL,MAAM,EAAEE,QAAQ,KAAK;IAChCH,UAAU,CAAC,IAAI,CAAC;IAChBE,SAAS,CAACD,MAAM,CAAC;IACjBG,WAAW,CAACD,QAAQ,CAAC;IACrBE,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EAID,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;MACrB;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,SAAS,EAAER;QAAS,CAAC;MAChD,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;QACbX,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAC1D,CAAC,MAAM;QACHD,OAAO,CAACY,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;MACvD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChE;;IAEA;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IACvCC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACjBC,aAAa,CAAC,KAAK,CAAC;IACpBC,WAAW,CAAC,IAAI,CAAC;EAErB,CAAC;;EAID;EACA,oBACIjC,OAAA,CAACC,WAAW,CAACiC,QAAQ;IAACC,KAAK,EAAE;MAAE5B,OAAO;MAAEE,MAAM;MAAEE,QAAQ;MAAEG,KAAK;MAAEC;IAAO,CAAE;IAAAV,QAAA,EACrEA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAAjC,GAAA,CAzDMF,YAAY;EAAA,QAKGN,WAAW;AAAA;AAAA0C,EAAA,GAL1BpC,YAAY;AA0DlB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}